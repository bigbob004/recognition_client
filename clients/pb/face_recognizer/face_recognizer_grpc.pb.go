// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: api/clients/face_recognizer.proto

package face_recognizer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FaceRecognizer_RecognizeFace_FullMethodName = "/FaceRecognizer/RecognizeFace"
	FaceRecognizer_Train_FullMethodName         = "/FaceRecognizer/Train"
)

// FaceRecognizerClient is the client API for FaceRecognizer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FaceRecognizerClient interface {
	RecognizeFace(ctx context.Context, in *RecognizeFaceRequest, opts ...grpc.CallOption) (*RecognizeFaceResponse, error)
	Train(ctx context.Context, in *TrainRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type faceRecognizerClient struct {
	cc grpc.ClientConnInterface
}

func NewFaceRecognizerClient(cc grpc.ClientConnInterface) FaceRecognizerClient {
	return &faceRecognizerClient{cc}
}

func (c *faceRecognizerClient) RecognizeFace(ctx context.Context, in *RecognizeFaceRequest, opts ...grpc.CallOption) (*RecognizeFaceResponse, error) {
	out := new(RecognizeFaceResponse)
	err := c.cc.Invoke(ctx, FaceRecognizer_RecognizeFace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faceRecognizerClient) Train(ctx context.Context, in *TrainRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FaceRecognizer_Train_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FaceRecognizerServer is the server API for FaceRecognizer service.
// All implementations must embed UnimplementedFaceRecognizerServer
// for forward compatibility
type FaceRecognizerServer interface {
	RecognizeFace(context.Context, *RecognizeFaceRequest) (*RecognizeFaceResponse, error)
	Train(context.Context, *TrainRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedFaceRecognizerServer()
}

// UnimplementedFaceRecognizerServer must be embedded to have forward compatible implementations.
type UnimplementedFaceRecognizerServer struct {
}

func (UnimplementedFaceRecognizerServer) RecognizeFace(context.Context, *RecognizeFaceRequest) (*RecognizeFaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecognizeFace not implemented")
}
func (UnimplementedFaceRecognizerServer) Train(context.Context, *TrainRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Train not implemented")
}
func (UnimplementedFaceRecognizerServer) mustEmbedUnimplementedFaceRecognizerServer() {}

// UnsafeFaceRecognizerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FaceRecognizerServer will
// result in compilation errors.
type UnsafeFaceRecognizerServer interface {
	mustEmbedUnimplementedFaceRecognizerServer()
}

func RegisterFaceRecognizerServer(s grpc.ServiceRegistrar, srv FaceRecognizerServer) {
	s.RegisterService(&FaceRecognizer_ServiceDesc, srv)
}

func _FaceRecognizer_RecognizeFace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecognizeFaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceRecognizerServer).RecognizeFace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FaceRecognizer_RecognizeFace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceRecognizerServer).RecognizeFace(ctx, req.(*RecognizeFaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaceRecognizer_Train_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceRecognizerServer).Train(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FaceRecognizer_Train_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceRecognizerServer).Train(ctx, req.(*TrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FaceRecognizer_ServiceDesc is the grpc.ServiceDesc for FaceRecognizer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FaceRecognizer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FaceRecognizer",
	HandlerType: (*FaceRecognizerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecognizeFace",
			Handler:    _FaceRecognizer_RecognizeFace_Handler,
		},
		{
			MethodName: "Train",
			Handler:    _FaceRecognizer_Train_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/clients/face_recognizer.proto",
}
